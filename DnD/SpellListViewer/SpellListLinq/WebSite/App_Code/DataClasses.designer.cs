//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1318
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



public partial class DataClassesDataContext : global::System.Data.Linq.DataContext {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public DataClassesDataContext(string connection) : 
            base(connection) {
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public DataClassesDataContext(global::System.Data.IDbConnection connection) : 
            base(connection) {
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public DataClassesDataContext() : 
            base(System.Configuration.ConfigurationManager.ConnectionStrings["StoredSpellListDBconnstr"].ConnectionString) {
    }
    
    public global::System.Data.Linq.Table<StoredSpelllist> StoredSpelllists {
        get {
            return this.GetTable<StoredSpelllist>();
        }
    }
}

[global::System.Data.Linq.Table(Name="dbo.spelllist")]
public partial class StoredSpelllist : global::System.Data.Linq.INotifyPropertyChanging, global::System.ComponentModel.INotifyPropertyChanged {
    
    private string _name;
    
    private string _list;
    
    private string _username;
    
    private global::System.DateTime _version;
    
    [global::System.Data.Linq.Column(Storage="_name", Name="name", DBType="NVarChar(50) NOT NULL", IsPrimaryKey=true, CanBeNull=false)]
    public string name {
        get {
            return this._name;
        }
        set {
            if ((this._name != value)) {
                this.OnPropertyChanging("name");
                this._name = value;
                this.OnPropertyChanged("name");
            }
        }
    }
    
    [global::System.Data.Linq.Column(Storage="_list", Name="list", DBType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
    public string list {
        get {
            return this._list;
        }
        set {
            if ((this._list != value)) {
                this.OnPropertyChanging("list");
                this._list = value;
                this.OnPropertyChanged("list");
            }
        }
    }
    
    [global::System.Data.Linq.Column(Storage="_username", Name="username", DBType="NVarChar(50) NOT NULL", IsPrimaryKey=true, CanBeNull=false)]
    public string username {
        get {
            return this._username;
        }
        set {
            if ((this._username != value)) {
                this.OnPropertyChanging("username");
                this._username = value;
                this.OnPropertyChanged("username");
            }
        }
    }
    
    [global::System.Data.Linq.Column(Storage="_version", Name="version", DBType="DateTime NOT NULL", IsPrimaryKey=true, CanBeNull=false)]
    public global::System.DateTime version {
        get {
            return this._version;
        }
        set {
            if ((this._version != value)) {
                this.OnPropertyChanging("version");
                this._version = value;
                this.OnPropertyChanged("version");
            }
        }
    }
    
    public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanging;
    
    public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected void OnPropertyChanging(string propertyName) {
        if ((this.PropertyChanging != null)) {
            this.PropertyChanging(this, new global::System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected void OnPropertyChanged(string propertyName) {
        if ((this.PropertyChanged != null)) {
            this.PropertyChanged(this, new global::System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
}
