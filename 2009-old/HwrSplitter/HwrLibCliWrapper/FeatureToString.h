#pragma once
#include "feature/featurevector.h"
namespace HwrLibCliWrapper {
	public ref class FeatureToString abstract sealed
	{

	public:
		static array<String^>^ FeatureNames() {
			using namespace System::Collections::Generic;
			List<String^> ^ name = gcnew List<String^>( gcnew array<String^>(NUMBER_OF_FEATURES+1));
			
//the following code is largely generated by replacing: "^,:b{:i}($|(:b|=){[^\n]*}$)$" with "\tname[\1] = "\1"; // \2" within featurevector.h

#if HORIZ_POS
	name[FEATURE_IMAGE_WIDTH] = "FEATURE_IMAGE_WIDTH";
	name[FEATURE_IMAGE_HEIGHT] = "FEATURE_IMAGE_HEIGHT";
	name[FEATURE_WINDOW_WIDTH] = "FEATURE_WINDOW_WIDTH";
	name[FEATURE_X_HEIGHT] = "FEATURE_X_HEIGHT";
#endif
	name[FEATURE_DENSITY] = "FEATURE_DENSITY";
#if USE_DENSITY_DEV
	name[FEATURE_DENSITY_DEV] = "FEATURE_DENSITY_DEV";
	name[FEATURE_DENSITY_LOW_DEV] = "FEATURE_DENSITY_LOW_DEV";
	name[FEATURE_DENSITY_MID_DEV] = "FEATURE_DENSITY_MID_DEV";
	name[FEATURE_DENSITY_HIGH_DEV] = "FEATURE_DENSITY_HIGH_DEV";
#endif
	name[SELECT_CORR_BEGIN] = "SELECT_CORR_BEGIN";
	name[FEATURE_DENSITY_LOW] = "FEATURE_DENSITY_LOW"; // = SELECT_CORR_BEGIN
	name[FEATURE_DENSITY_MID] = "FEATURE_DENSITY_MID";
	name[FEATURE_DENSITY_HIGH] = "FEATURE_DENSITY_HIGH";
#if USE_EDGES
	name[FEATURE_DENSITY_LEFT_EDGE] = "FEATURE_DENSITY_LEFT_EDGE";
	name[FEATURE_DENSITY_RIGHT_EDGE] = "FEATURE_DENSITY_RIGHT_EDGE";
#endif
	name[SELECT_CORR_END] = "SELECT_CORR_END";
	name[FEATURE_DENSITY_CORR] = "FEATURE_DENSITY_CORR"; // = SELECT_CORR_END
	name[FEATURE_DENSITY_CORR_END] = "FEATURE_DENSITY_CORR_END"; // = FEATURE_DENSITY_CORR + (SELECT_CORR_END-SELECT_CORR_BEGIN)*(SELECT_CORR_END-SELECT_CORR_BEGIN-1)/2
	name[FEATURE_DENSITY_LOW_NEAR] = "FEATURE_DENSITY_LOW_NEAR"; //  FEATURE_DENSITY_CORR_END
	name[FEATURE_DENSITY_LOW_FAR] = "FEATURE_DENSITY_LOW_FAR";
#if HORIZ_POS
	name[FEATURE_DENSITY_LEFT_LOW] = "FEATURE_DENSITY_LEFT_LOW";
	name[FEATURE_DENSITY_LEFT_MID] = "FEATURE_DENSITY_LEFT_MID";
	name[FEATURE_DENSITY_LEFT_HIGH] = "FEATURE_DENSITY_LEFT_HIGH";
	name[FEATURE_DENSITY_RIGHT_LOW] = "FEATURE_DENSITY_RIGHT_LOW";
	name[FEATURE_DENSITY_RIGHT_MID] = "FEATURE_DENSITY_RIGHT_MID";
	name[FEATURE_DENSITY_RIGHT_HIGH] = "FEATURE_DENSITY_RIGHT_HIGH";
#endif
	name[FEATURE_DENSITY_HIGH_NEAR] = "FEATURE_DENSITY_HIGH_NEAR";
	name[FEATURE_DENSITY_HIGH_FAR] = "FEATURE_DENSITY_HIGH_FAR";
	name[FEATURE_DENSITY_MID_FIX] = "FEATURE_DENSITY_MID_FIX";
	name[FEATURE_DENSITY_HIGH_NEAR_FIX] = "FEATURE_DENSITY_HIGH_NEAR_FIX";
	name[FEATURE_DENSITY_HIGH_FAR_FIX] = "FEATURE_DENSITY_HIGH_FAR_FIX";
	name[FEATURE_DENSITY_HIGH_MIN_FIX] = "FEATURE_DENSITY_HIGH_MIN_FIX";
#if HORIZ_POS
	name[FEATURE_MEAN_X_WORD] = "FEATURE_MEAN_X_WORD"; // left of word is 0, right is 1
	name[FEATURE_MEAN_X_WINDOW] = "FEATURE_MEAN_X_WINDOW"; // left of window is 0, right is 1
#endif
	name[FEATURE_MEAN_Y_WINDOW] = "FEATURE_MEAN_Y_WINDOW";
#if HORIZ_POS
	name[FEATURE_STDDEV_X_WINDOW] = "FEATURE_STDDEV_X_WINDOW";
#endif
	name[FEATURE_STDDEV_Y_WINDOW] = "FEATURE_STDDEV_Y_WINDOW";
#if USE_DOT_DETECTOR
	name[FEATURE_DOT_COUNT] = "FEATURE_DOT_COUNT";
#endif
	name[FEATURE_BOUNDARY_ANGLE_2PIX_1] = "FEATURE_BOUNDARY_ANGLE_2PIX_1";
	name[FEATURE_BOUNDARY_ANGLE_2PIX_2] = "FEATURE_BOUNDARY_ANGLE_2PIX_2";
	name[FEATURE_BOUNDARY_ANGLE_2PIX_3] = "FEATURE_BOUNDARY_ANGLE_2PIX_3";
	name[FEATURE_BOUNDARY_ANGLE_2PIX_4] = "FEATURE_BOUNDARY_ANGLE_2PIX_4";
	name[FEATURE_BOUNDARY_ANGLE_2PIX_NONE] = "FEATURE_BOUNDARY_ANGLE_2PIX_NONE";
#if USE_SKELETON
	name[FEATURE_SKELETON_ANGLE_2PIX_1] = "FEATURE_SKELETON_ANGLE_2PIX_1";
	name[FEATURE_SKELETON_ANGLE_2PIX_2] = "FEATURE_SKELETON_ANGLE_2PIX_2";
	name[FEATURE_SKELETON_ANGLE_2PIX_3] = "FEATURE_SKELETON_ANGLE_2PIX_3";
	name[FEATURE_SKELETON_ANGLE_2PIX_4] = "FEATURE_SKELETON_ANGLE_2PIX_4";
	name[FEATURE_SKELETON_ANGLE_2PIX_NONE] = "FEATURE_SKELETON_ANGLE_2PIX_NONE";
#endif
#if USE_BOUNDARY_ANGLES
	name[FEATURE_BOUNDARY_ANGLE_HISTO] = "FEATURE_BOUNDARY_ANGLE_HISTO";
	name[FEATURE_BOUNDARY_ANGLE_HISTO_END] = "FEATURE_BOUNDARY_ANGLE_HISTO_END"; // = FEATURE_BOUNDARY_ANGLE_HISTO + BOUNDARY_HISTO_RESOLUTION_BASE * BOUNDARY_HISTO_RESOLUTION_DIFF
#if HORIZ_POS
	name[FEATURE_BOUNDARY_ANGLE_HISTO_MID] = "FEATURE_BOUNDARY_ANGLE_HISTO_MID"; //     = FEATURE_BOUNDARY_ANGLE_HISTO_END
	name[FEATURE_BOUNDARY_ANGLE_HISTO_MID_END] = "FEATURE_BOUNDARY_ANGLE_HISTO_MID_END"; // = FEATURE_BOUNDARY_ANGLE_HISTO_MID + BOUNDARY_HISTO_RESOLUTION_BASE * BOUNDARY_HISTO_RESOLUTION_DIFF
#else
	name[FEATURE_BOUNDARY_ANGLE_HISTO_MID_END] = "FEATURE_BOUNDARY_ANGLE_HISTO_MID_END";
#endif
#else
	name[FEATURE_BOUNDARY_ANGLE_HISTO_MID_END] = "FEATURE_BOUNDARY_ANGLE_HISTO_MID_END"; 
#endif

#if USE_MEAN_ANGLES
#if HORIZ_POS
	name[FEATURE_MEAN_X_ANGLE_HISTO] = "FEATURE_MEAN_X_ANGLE_HISTO"; //     = FEATURE_BOUNDARY_ANGLE_HISTO_MID_END
	name[FEATURE_MEAN_X_ANGLE_HISTO_END] = "FEATURE_MEAN_X_ANGLE_HISTO_END"; // = FEATURE_MEAN_X_ANGLE_HISTO + BOUNDARY_HISTO_RESOLUTION_BASE
#else
	name[FEATURE_MEAN_X_ANGLE_HISTO_END] = "FEATURE_MEAN_X_ANGLE_HISTO_END";
#endif
	name[FEATURE_MEAN_Y_ANGLE_HISTO] = "FEATURE_MEAN_Y_ANGLE_HISTO"; //     = FEATURE_MEAN_X_ANGLE_HISTO_END
	name[FEATURE_MEAN_Y_ANGLE_HISTO_END] = "FEATURE_MEAN_Y_ANGLE_HISTO_END"; // = FEATURE_MEAN_Y_ANGLE_HISTO + BOUNDARY_HISTO_RESOLUTION_BASE
#else
	name[FEATURE_MEAN_Y_ANGLE_HISTO_END] = "FEATURE_MEAN_Y_ANGLE_HISTO_END"; // = FEATURE_BOUNDARY_ANGLE_HISTO_MID_END
#endif

#if USE_DOWNSAMPLED
	name[FEATURE_DOWNSAMPLED] = "FEATURE_DOWNSAMPLED"; //     = FEATURE_MEAN_Y_ANGLE_HISTO_END
	name[FEATURE_DOWNSAMPLED_END] = "FEATURE_DOWNSAMPLED_END"; // = FEATURE_DOWNSAMPLED + DOWNSAMPLE_RESOLUTION_Y 
#if HORIZ_POS
													* DOWNSAMPLE_RESOLUTION_X
#endif
#else
	name[FEATURE_DOWNSAMPLED_END] = "FEATURE_DOWNSAMPLED_END"; // = FEATURE_MEAN_Y_ANGLE_HISTO_END
#endif
#if USE_DOWNSAMPLED_BGS
	name[FEATURE_DOWNSAMPLED_BGS] = "FEATURE_DOWNSAMPLED_BGS"; //     = FEATURE_DOWNSAMPLED_END
	name[FEATURE_DOWNSAMPLED_BGS_END] = "FEATURE_DOWNSAMPLED_BGS_END"; // = FEATURE_DOWNSAMPLED_BGS + DOWNSAMPLE_BGS_RESOLUTION_Y 
#if HORIZ_POS
													* DOWNSAMPLE_BGS_RESOLUTION_X
#endif

#else
	name[FEATURE_DOWNSAMPLED_BGS_END] = "FEATURE_DOWNSAMPLED_BGS_END"; // = FEATURE_DOWNSAMPLED_END
#endif

#if USE_RUNLENGTHS
	name[FEATURE_RUNLENGTH] = "FEATURE_RUNLENGTH"; //     = FEATURE_DOWNSAMPLED_BGS_END
	name[FEATURE_RUNLENGTH_END] = "FEATURE_RUNLENGTH_END"; // = FEATURE_RUNLENGTH + RUNLENGTH_RESOLUTION_Y 
#if HORIZ_POS
												* RUNLENGTH_RESOLUTION_X
#endif
#else
	name[FEATURE_RUNLENGTH_END] = "FEATURE_RUNLENGTH_END"; // = FEATURE_DOWNSAMPLED_BGS_END
#endif

#if USE_ENVELOPES
	name[FEATURE_UPPER_ENVELOPE1] = "FEATURE_UPPER_ENVELOPE1"; //     = FEATURE_RUNLENGTH_END
	name[FEATURE_UPPER_ENVELOPE1_END] = "FEATURE_UPPER_ENVELOPE1_END"; // = FEATURE_UPPER_ENVELOPE1 + ENVELOPE_RESOLUTION_X
	name[FEATURE_LOWER_ENVELOPE1] = "FEATURE_LOWER_ENVELOPE1"; //     = FEATURE_UPPER_ENVELOPE1_END
	name[FEATURE_LOWER_ENVELOPE1_END] = "FEATURE_LOWER_ENVELOPE1_END"; // = FEATURE_LOWER_ENVELOPE1 + ENVELOPE_RESOLUTION_X
	name[FEATURE_UPPER_ENVELOPE2] = "FEATURE_UPPER_ENVELOPE2"; //     = FEATURE_LOWER_ENVELOPE1_END
	name[FEATURE_UPPER_ENVELOPE2_END] = "FEATURE_UPPER_ENVELOPE2_END"; // = FEATURE_UPPER_ENVELOPE2 + ENVELOPE_RESOLUTION_X
	name[FEATURE_LOWER_ENVELOPE2] = "FEATURE_LOWER_ENVELOPE2"; //     = FEATURE_UPPER_ENVELOPE2_END
	name[FEATURE_LOWER_ENVELOPE2_END] = "FEATURE_LOWER_ENVELOPE2_END"; // = FEATURE_LOWER_ENVELOPE2 + ENVELOPE_RESOLUTION_X
#else
	name[FEATURE_LOWER_ENVELOPE2_END] = "FEATURE_LOWER_ENVELOPE2_END"; // = FEATURE_RUNLENGTH_END
#endif

#if USE_ANGLE_ZONES
	name[FEATURE_ANGLE_ZONES] = "FEATURE_ANGLE_ZONES"; //     = FEATURE_LOWER_ENVELOPE2_END
	name[FEATURE_ANGLE_ZONES_END] = "FEATURE_ANGLE_ZONES_END"; // = FEATURE_ANGLE_ZONES + BOUNDARY_HISTO_RESOLUTION_BASE * DOWNSAMPLE_RESOLUTION_X
#else
	name[FEATURE_ANGLE_ZONES_END] = "FEATURE_ANGLE_ZONES_END"; // = FEATURE_LOWER_ENVELOPE2_END
#endif

	name[NUMBER_OF_FEATURES] = "NUMBER_OF_FEATURES"; // = FEATURE_ANGLE_ZONES_END

	name->RemoveAt(NUMBER_OF_FEATURES);

	return name->ToArray();
		}
	};

}