Index: File.cs
===================================================================
--- File.cs	(revision 160737)
+++ File.cs	(working copy)
@@ -1405,49 +1405,50 @@
 		/// </exception>
 		public static File Create (IFileAbstraction abstraction,
 		                           string mimetype,
-		                           ReadStyle propertiesStyle)
-		{
-			if(mimetype == null) {
-				string ext = String.Empty;
-				
-				int index = abstraction.Name.LastIndexOf (".") + 1;
-				
-				if(index >= 1 && index < abstraction.Name.Length)
-					ext = abstraction.Name.Substring (index,
-						abstraction.Name.Length - index);
-				
-				mimetype = "taglib/" + ext.ToLower(
-					CultureInfo.InvariantCulture);
-			}
-			
-			foreach (FileTypeResolver resolver in file_type_resolvers) {
-				File file = resolver(abstraction, mimetype,
-					propertiesStyle);
-				
-				if(file != null)
-					return file;
-			}
-			
-			if (!FileTypes.AvailableTypes.ContainsKey(mimetype))
-				throw new UnsupportedFormatException (
-					String.Format (
-						CultureInfo.InvariantCulture,
-						"{0} ({1})",
-						abstraction.Name,
-						mimetype));
-			
-			Type file_type = FileTypes.AvailableTypes[mimetype];
-			
-			try {
-				File file = (File) Activator.CreateInstance(
-					file_type,
-					new object [] {abstraction, propertiesStyle});
-				
-				file.MimeType = mimetype;
-				return file;
-			} catch (System.Reflection.TargetInvocationException e) {
-				throw e.InnerException;
-			}
+		                           ReadStyle propertiesStyle) {
+			if (mimetype == null) {
+				string ext = String.Empty;
+
+				int index = abstraction.Name.LastIndexOf(".") + 1;
+
+				if (index >= 1 && index < abstraction.Name.Length)
+					ext = abstraction.Name.Substring(index,
+						abstraction.Name.Length - index);
+
+				mimetype = "taglib/" + ext.ToLower(
+					CultureInfo.InvariantCulture);
+			}
+
+			foreach (FileTypeResolver resolver in file_type_resolvers) {
+				File file = resolver(abstraction, mimetype,
+					propertiesStyle);
+
+				if (file != null)
+					return file;
+			}
+
+			if (!FileTypes.AvailableTypes.ContainsKey(mimetype))
+				throw new UnsupportedFormatException(
+					String.Format(
+						CultureInfo.InvariantCulture,
+						"{0} ({1})",
+						abstraction.Name,
+						mimetype));
+
+			Type file_type = FileTypes.AvailableTypes[mimetype];
+
+			//try {
+			{
+				File file = (File)Activator.CreateInstance(
+					file_type,
+					new object[] { abstraction, propertiesStyle });
+
+				file.MimeType = mimetype;
+				return file;
+			}
+			//} catch (System.Reflection.TargetInvocationException e) {
+			//    throw e.InnerException;//rethrowing exceptions is bad for debugging/logging.
+			//}
 		}
 		
 		/// <summary>
